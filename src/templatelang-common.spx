package mobltemplatelang

module TemplateLangCommon

imports
  libstratego-gpp

signature
  constructors
    I        : List(S-OPTION) * BOX -> BOX
    HZ       : List(S-OPTION) * List(BOX) -> BOX
    Z        : List(S-OPTION) * List(BOX) -> BOX

strategies

  pp-one-V(pp) = !V([], <pp>)
  pp-one-Z(pp) = !Z([], <pp>)

  pp-option(pp) = \None() -> []\ + ?Some(<pp>)

  pp-V-list(pp)    = ?[] <+ !V([], <map(pp-one-V(pp))>)
  pp-V-list(pp|vs) = ?[] <+ !V([SOpt(VS(), vs)], <map(pp-one-V(pp))>)

  pp-indent(|is) = ?[] <+ !I([SOpt(IS(), is)], H([SOpt(HS(), "0")], <id>))

  pp-H-list(pp)     = ?[] <+ !H([], <map(pp-one-Z(pp))>)
  pp-H-list(pp|sep) = ?[] <+ !H([SOpt(HS(), "0")], <map(pp-one-Z(pp)); separate-by(|S(sep))>)

  pp-HV-list(pp)     = ?[] <+ !HV([SOpt(HS(), "0")], <map(pp-one-Z(pp))>)
  pp-HV-list(pp|sep) = ?[] <+ !HV([SOpt(HS(), "0")], <map(pp-one-Z(pp)); separate-by(|S(sep))>)

  pp-HZ-list(pp)     = ?[] <+ !HZ([SOpt(HS(), "0")], <map(pp-one-Z(pp))>)
  pp-HZ-list(pp|sep) = ?[] <+ !HZ([SOpt(HS(), "0")], <map(pp-one-Z(pp)); separate-by(|S(sep))>)

// signature constructors
//   HZ : S-OPTIONS * BOX-LIST -> BOX
//   Z  : S-OPTIONS * BOX-LIST -> BOX
//   I  : S-OPTIONS * BOX -> BOX
// 
// strategies
// 
//   box2text-string'(|width) =
//     abox2text'(|width)
//     ; (is-string <+ flatten-list; concat-strings)
// 
//   abox2text'(|width) =
//       rules( GppIndent := 0 )
//     ; let local-abox2text(|pos) =
//             abox2text'(local-abox2text | pos, width)
// 
//        in local-abox2text(|0)
//       end
//     ; Fst
// 
//   abox2text'(rec : t * t -> t | xpos, width) =
//     abox2text-HV(rec | xpos, width)
//     + abox2text-HZ(rec | xpos, width)
//     + abox2text-H(rec | xpos, width)
//     + abox2text-V(rec | xpos, width)
//     + abox2text-Z(rec | xpos, width)
//     + abox2text-I(rec | xpos, width)
//     + abox2text-A(rec | xpos, width)
//     + abox2text-R(rec | xpos, width)
//     + abox2text-S(rec | xpos, width)
//     + abox2text-C(rec | xpos, width)
//     + abox2text-FBOX(rec | xpos, width)
//     + abox2text-R(rec | xpos, width)
//     + abox2text-ALT(rec | xpos, width)
//     + abox2text-list(rec | xpos, width)
// 
//   // `I is=N b' is equivalent to `H hs=N [S(""), b]'
//   // NOTE: this I box is not context sensitive!
//   // NOTE: this I box takes a single box as argument, not a list of boxes!
//   abox2text-I(rec : t * t -> t | xpos, width) =
//     ?I(sopt, bs)
// 
//     ; {|GppIndent:
//           <add> (xpos, <gpp-is-length> sopt) => left-xpos
//         ; rules( GppIndent := left-xpos )
//         ; <fetch-elem(?SOpt(IS(), <id>)) <+ !"0"> sopt => value
//         ; <rec(|xpos)> H([SOpt(HS(), value)], [S(""), bs])
//       |}
// 
//   abox2text-Z(rec : t * t -> t | xpos, width) =
//     ?Z(sopt, bs)
// 
//     ; GppIndent => indent
//     ; <add> (indent, <gpp-is-length> sopt) => left-xpos
//     ; <filter(gpp-is-real-vbox)> bs
//     ; if ?[] then
//         !([], xpos)
//       else
//         gpp-do-vbox-children(rec | xpos, left-xpos)
//         ; gpp-format-vbox(|sopt, indent)
//       end
// 
//   abox2text-HZ(rec : t * t -> t | xpos, width) =
//     ?HZ(sopt, bs)
// 
//     ; <gpp-hs-chars> sopt => hs-chars
//     ; <implode-string> hs-chars => hs
//     ; <gpp-vs-text> sopt => vs
//     ; <length> hs-chars => hsl
//     ; GppIndent => indent
//     ; <add> (indent, <gpp-is-length> sopt) => left-xpos
//     ; <filter(gpp-is-real-vbox)> bs
//     ; if ?[] then
//         !([], xpos)
//       else
//         !(<id>, [([], xpos)])
//         ; foldl(
//             gpp-hv-add-to-hbox(rec | hsl, width)
//             <+ gpp-hv-in-new-vbox(rec | hsl, left-xpos, width)
//           )
//           // Substract last hspace from xpos
//         ; [(id, <subt> (<id>, hsl)) | id]
//         ; reverse; map((reverse, id))
//         ; map((<separate-by> (hs, <id>), id))
//         ; gpp-format-vbox(|sopt, indent)
//       end
